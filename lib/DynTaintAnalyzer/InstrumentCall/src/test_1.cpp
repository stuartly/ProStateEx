// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("/home/lzs243/Documents/ProtocolEx/lib/DynTaintAnalyzer/InstrumentCall/src/test_1.bc", getGlobalContext());
 mod->setDataLayout("0x504a260");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 3);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
 
 ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
 
 PointerType* PointerTy_4 = PointerType::get(ArrayTy_3, 0);
 
 ArrayType* ArrayTy_5 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 13);
 
 PointerType* PointerTy_6 = PointerType::get(ArrayTy_5, 0);
 
 std::vector<Type*>FuncTy_7_args;
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_8_args;
 FuncTy_8_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_10_args;
 FuncTy_10_args.push_back(OtherTy_11);
 FuncTy_10_args.push_back(OtherTy_11);
 FuncTy_10_args.push_back(OtherTy_11);
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(FuncTy_10, 0);
 
 PointerType* PointerTy_12 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_14_args;
 FuncTy_14_args.push_back(PointerTy_12);
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_13 = PointerType::get(FuncTy_14, 0);
 
 PointerType* PointerTy_15 = PointerType::get(FuncTy_7, 0);
 
 PointerType* PointerTy_16 = PointerType::get(FuncTy_8, 0);
 
 
 // Function Declarations
 
 Function* func_foo = mod->getFunction("foo");
 if (!func_foo) {
 func_foo = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 Function* func_foo2 = mod->getFunction("foo2");
 if (!func_foo2) {
 func_foo2 = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo2", mod); 
 func_foo2->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo2_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo2_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo2->setAttributes(func_foo2_PAL);
 
 Function* func_llvm_dbg_declare = mod->getFunction("llvm.dbg.declare");
 if (!func_llvm_dbg_declare) {
 func_llvm_dbg_declare = Function::Create(
  /*Type=*/FuncTy_10,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm.dbg.declare", mod); // (external, no body)
 func_llvm_dbg_declare->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_dbg_declare_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_dbg_declare_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_dbg_declare->setAttributes(func_llvm_dbg_declare_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func___isoc99_scanf = mod->getFunction("__isoc99_scanf");
 if (!func___isoc99_scanf) {
 func___isoc99_scanf = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__isoc99_scanf", mod); // (external, no body)
 func___isoc99_scanf->setCallingConv(CallingConv::C);
 }
 AttributeSet func___isoc99_scanf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___isoc99_scanf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___isoc99_scanf->setAttributes(func___isoc99_scanf_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_int32_global = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 32),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"global");
 gvar_int32_global->setAlignment(4);
 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_1,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_3,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str1");
 gvar_array__str1->setAlignment(1);
 
 GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_5,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str2");
 gvar_array__str2->setAlignment(1);
 
 // Constant Definitions
 ConstantInt* const_int32_17 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 Constant *const_array_18 = ConstantDataArray::getString(mod->getContext(), "%d", true);
 Constant *const_array_19 = ConstantDataArray::getString(mod->getContext(), "%d\x0A", true);
 Constant *const_array_20 = ConstantDataArray::getString(mod->getContext(), "hello world\x0A", true);
 ConstantInt* const_int32_21 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_22 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
 std::vector<Constant*> const_ptr_23_indices;
 const_ptr_23_indices.push_back(const_int32_17);
 const_ptr_23_indices.push_back(const_int32_17);
 Constant* const_ptr_23 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_23_indices);
 std::vector<Constant*> const_ptr_24_indices;
 const_ptr_24_indices.push_back(const_int32_17);
 const_ptr_24_indices.push_back(const_int32_17);
 Constant* const_ptr_24 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_24_indices);
 std::vector<Constant*> const_ptr_25_indices;
 const_ptr_25_indices.push_back(const_int32_17);
 const_ptr_25_indices.push_back(const_int32_17);
 Constant* const_ptr_25 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_25_indices);
 
 // Global Variable Definitions
 gvar_int32_global->setInitializer(const_int32_17);
 gvar_array__str->setInitializer(const_array_18);
 gvar_array__str1->setInitializer(const_array_19);
 gvar_array__str2->setInitializer(const_array_20);
 
 // Function Definitions
 
 // Function: foo (func_foo)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_foo,0);
  
  // Block entry (label_entry)
  LoadInst* int32_26 = new LoadInst(gvar_int32_global, "", false, label_entry);
  int32_26->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_26, label_entry);
  
 }
 
 // Function: foo2 (func_foo2)
 {
  Function::arg_iterator args = func_foo2->arg_begin();
  Value* int32_b = args++;
  int32_b->setName("b");
  
  BasicBlock* label_entry_28 = BasicBlock::Create(mod->getContext(), "entry",func_foo2,0);
  
  // Block entry (label_entry_28)
  AllocaInst* ptr_b_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b.addr", label_entry_28);
  ptr_b_addr->setAlignment(4);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a", label_entry_28);
  ptr_a->setAlignment(4);
  StoreInst* void_29 = new StoreInst(int32_b, ptr_b_addr, false, label_entry_28);
  void_29->setAlignment(4);
  std::vector<Value*> void_30_params;
  void_30_params.push_back(other_31);
  void_30_params.push_back(other_32);
  void_30_params.push_back(other_33);
  CallInst* void_30 = CallInst::Create(func_llvm_dbg_declare, void_30_params, "", label_entry_28);
  void_30->setCallingConv(CallingConv::C);
  void_30->setTailCall(false);
  AttributeSet void_30_PAL;
  void_30->setAttributes(void_30_PAL);
  
  std::vector<Value*> void_34_params;
  void_34_params.push_back(other_35);
  void_34_params.push_back(other_36);
  void_34_params.push_back(other_33);
  CallInst* void_34 = CallInst::Create(func_llvm_dbg_declare, void_34_params, "", label_entry_28);
  void_34->setCallingConv(CallingConv::C);
  void_34->setTailCall(false);
  AttributeSet void_34_PAL;
  void_34->setAttributes(void_34_PAL);
  
  LoadInst* int32_37 = new LoadInst(ptr_b_addr, "", false, label_entry_28);
  int32_37->setAlignment(4);
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_37, const_int32_22, "add", label_entry_28);
  StoreInst* void_38 = new StoreInst(int32_add, ptr_a, false, label_entry_28);
  void_38->setAlignment(4);
  LoadInst* int32_39 = new LoadInst(ptr_a, "", false, label_entry_28);
  int32_39->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_39, label_entry_28);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_41 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry_41)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry_41);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_input = new AllocaInst(IntegerType::get(mod->getContext(), 32), "input", label_entry_41);
  ptr_input->setAlignment(4);
  AllocaInst* ptr_T14 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "T14", label_entry_41);
  ptr_T14->setAlignment(4);
  AllocaInst* ptr_T15 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "T15", label_entry_41);
  ptr_T15->setAlignment(4);
  StoreInst* void_42 = new StoreInst(const_int32_17, ptr_retval, false, label_entry_41);
  std::vector<Value*> void_43_params;
  void_43_params.push_back(other_44);
  void_43_params.push_back(other_45);
  void_43_params.push_back(other_33);
  CallInst* void_43 = CallInst::Create(func_llvm_dbg_declare, void_43_params, "", label_entry_41);
  void_43->setCallingConv(CallingConv::C);
  void_43->setTailCall(false);
  AttributeSet void_43_PAL;
  void_43->setAttributes(void_43_PAL);
  
  StoreInst* void_46 = new StoreInst(const_int32_17, ptr_input, false, label_entry_41);
  void_46->setAlignment(4);
  std::vector<Value*> int32_call_params;
  int32_call_params.push_back(const_ptr_23);
  int32_call_params.push_back(ptr_input);
  CallInst* int32_call = CallInst::Create(func___isoc99_scanf, int32_call_params, "call", label_entry_41);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttributeSet int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  LoadInst* int32_47 = new LoadInst(ptr_input, "", false, label_entry_41);
  int32_47->setAlignment(4);
  StoreInst* void_48 = new StoreInst(int32_47, gvar_int32_global, false, label_entry_41);
  void_48->setAlignment(4);
  std::vector<Value*> void_49_params;
  void_49_params.push_back(other_50);
  void_49_params.push_back(other_51);
  void_49_params.push_back(other_33);
  CallInst* void_49 = CallInst::Create(func_llvm_dbg_declare, void_49_params, "", label_entry_41);
  void_49->setCallingConv(CallingConv::C);
  void_49->setTailCall(false);
  AttributeSet void_49_PAL;
  void_49->setAttributes(void_49_PAL);
  
  CallInst* int32_call1 = CallInst::Create(func_foo, "call1", label_entry_41);
  int32_call1->setCallingConv(CallingConv::C);
  int32_call1->setTailCall(false);
  AttributeSet int32_call1_PAL;
  int32_call1->setAttributes(int32_call1_PAL);
  
  StoreInst* void_52 = new StoreInst(int32_call1, ptr_T14, false, label_entry_41);
  void_52->setAlignment(4);
  std::vector<Value*> void_53_params;
  void_53_params.push_back(other_54);
  void_53_params.push_back(other_55);
  void_53_params.push_back(other_33);
  CallInst* void_53 = CallInst::Create(func_llvm_dbg_declare, void_53_params, "", label_entry_41);
  void_53->setCallingConv(CallingConv::C);
  void_53->setTailCall(false);
  AttributeSet void_53_PAL;
  void_53->setAttributes(void_53_PAL);
  
  LoadInst* int32_56 = new LoadInst(ptr_input, "", false, label_entry_41);
  int32_56->setAlignment(4);
  CallInst* int32_call2 = CallInst::Create(func_foo2, int32_56, "call2", label_entry_41);
  int32_call2->setCallingConv(CallingConv::C);
  int32_call2->setTailCall(false);
  AttributeSet int32_call2_PAL;
  int32_call2->setAttributes(int32_call2_PAL);
  
  StoreInst* void_57 = new StoreInst(int32_call2, ptr_T15, false, label_entry_41);
  void_57->setAlignment(4);
  LoadInst* int32_58 = new LoadInst(ptr_T15, "", false, label_entry_41);
  int32_58->setAlignment(4);
  std::vector<Value*> int32_call3_params;
  int32_call3_params.push_back(const_ptr_24);
  int32_call3_params.push_back(int32_58);
  CallInst* int32_call3 = CallInst::Create(func_printf, int32_call3_params, "call3", label_entry_41);
  int32_call3->setCallingConv(CallingConv::C);
  int32_call3->setTailCall(false);
  AttributeSet int32_call3_PAL;
  int32_call3->setAttributes(int32_call3_PAL);
  
  CallInst* int32_call4 = CallInst::Create(func_printf, const_ptr_25, "call4", label_entry_41);
  int32_call4->setCallingConv(CallingConv::C);
  int32_call4->setTailCall(false);
  AttributeSet int32_call4_PAL;
  int32_call4->setAttributes(int32_call4_PAL);
  
  LoadInst* int32_59 = new LoadInst(ptr_input, "", false, label_entry_41);
  int32_59->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_59, label_entry_41);
  
 }
 
 return mod;
}
