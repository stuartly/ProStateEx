// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("/home/stly/Documents/ProtocolEx/lib/DynTaintAnalyzer/InstrumentCall/src/test_2.bc", getGlobalContext());
 mod->setDataLayout("0x3ee9220");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 3);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
 
 ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
 
 PointerType* PointerTy_4 = PointerType::get(ArrayTy_3, 0);
 
 std::vector<Type*>FuncTy_5_args;
 FunctionType* FuncTy_5 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_5_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_8_args;
 FuncTy_8_args.push_back(OtherTy_9);
 FuncTy_8_args.push_back(OtherTy_9);
 FuncTy_8_args.push_back(OtherTy_9);
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_7 = PointerType::get(FuncTy_8, 0);
 
 PointerType* PointerTy_10 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_12_args;
 FuncTy_12_args.push_back(PointerTy_10);
 FunctionType* FuncTy_12 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_12_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_11 = PointerType::get(FuncTy_12, 0);
 
 PointerType* PointerTy_13 = PointerType::get(FuncTy_5, 0);
 
 PointerType* PointerTy_14 = PointerType::get(FuncTy_6, 0);
 
 
 // Function Declarations
 
 Function* func_foo = mod->getFunction("foo");
 if (!func_foo) {
 func_foo = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 Function* func_foo2 = mod->getFunction("foo2");
 if (!func_foo2) {
 func_foo2 = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo2", mod); 
 func_foo2->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo2_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo2_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo2->setAttributes(func_foo2_PAL);
 
 Function* func_llvm_dbg_declare = mod->getFunction("llvm.dbg.declare");
 if (!func_llvm_dbg_declare) {
 func_llvm_dbg_declare = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm.dbg.declare", mod); // (external, no body)
 func_llvm_dbg_declare->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_dbg_declare_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_dbg_declare_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_dbg_declare->setAttributes(func_llvm_dbg_declare_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func___isoc99_scanf = mod->getFunction("__isoc99_scanf");
 if (!func___isoc99_scanf) {
 func___isoc99_scanf = Function::Create(
  /*Type=*/FuncTy_12,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__isoc99_scanf", mod); // (external, no body)
 func___isoc99_scanf->setCallingConv(CallingConv::C);
 }
 AttributeSet func___isoc99_scanf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___isoc99_scanf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___isoc99_scanf->setAttributes(func___isoc99_scanf_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_12,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_int32_global = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 32),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"global");
 gvar_int32_global->setAlignment(4);
 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_1,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_3,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str1");
 gvar_array__str1->setAlignment(1);
 
 // Constant Definitions
 ConstantInt* const_int32_15 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 Constant *const_array_16 = ConstantDataArray::getString(mod->getContext(), "%d", true);
 Constant *const_array_17 = ConstantDataArray::getString(mod->getContext(), "%d\x0A", true);
 ConstantInt* const_int32_18 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_19 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
 std::vector<Constant*> const_ptr_20_indices;
 const_ptr_20_indices.push_back(const_int32_15);
 const_ptr_20_indices.push_back(const_int32_15);
 Constant* const_ptr_20 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_20_indices);
 std::vector<Constant*> const_ptr_21_indices;
 const_ptr_21_indices.push_back(const_int32_15);
 const_ptr_21_indices.push_back(const_int32_15);
 Constant* const_ptr_21 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_21_indices);
 
 // Global Variable Definitions
 gvar_int32_global->setInitializer(const_int32_15);
 gvar_array__str->setInitializer(const_array_16);
 gvar_array__str1->setInitializer(const_array_17);
 
 // Function Definitions
 
 // Function: foo (func_foo)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_foo,0);
  
  // Block entry (label_entry)
  LoadInst* int32_22 = new LoadInst(gvar_int32_global, "", false, label_entry);
  int32_22->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_22, label_entry);
  
 }
 
 // Function: foo2 (func_foo2)
 {
  Function::arg_iterator args = func_foo2->arg_begin();
  Value* int32_b = args++;
  int32_b->setName("b");
  
  BasicBlock* label_entry_24 = BasicBlock::Create(mod->getContext(), "entry",func_foo2,0);
  
  // Block entry (label_entry_24)
  AllocaInst* ptr_b_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b.addr", label_entry_24);
  ptr_b_addr->setAlignment(4);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a", label_entry_24);
  ptr_a->setAlignment(4);
  StoreInst* void_25 = new StoreInst(int32_b, ptr_b_addr, false, label_entry_24);
  void_25->setAlignment(4);
  std::vector<Value*> void_26_params;
  void_26_params.push_back(other_27);
  void_26_params.push_back(other_28);
  void_26_params.push_back(other_29);
  CallInst* void_26 = CallInst::Create(func_llvm_dbg_declare, void_26_params, "", label_entry_24);
  void_26->setCallingConv(CallingConv::C);
  void_26->setTailCall(false);
  AttributeSet void_26_PAL;
  void_26->setAttributes(void_26_PAL);
  
  std::vector<Value*> void_30_params;
  void_30_params.push_back(other_31);
  void_30_params.push_back(other_32);
  void_30_params.push_back(other_29);
  CallInst* void_30 = CallInst::Create(func_llvm_dbg_declare, void_30_params, "", label_entry_24);
  void_30->setCallingConv(CallingConv::C);
  void_30->setTailCall(false);
  AttributeSet void_30_PAL;
  void_30->setAttributes(void_30_PAL);
  
  LoadInst* int32_33 = new LoadInst(ptr_b_addr, "", false, label_entry_24);
  int32_33->setAlignment(4);
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_33, const_int32_19, "add", label_entry_24);
  StoreInst* void_34 = new StoreInst(int32_add, ptr_a, false, label_entry_24);
  void_34->setAlignment(4);
  LoadInst* int32_35 = new LoadInst(ptr_a, "", false, label_entry_24);
  int32_35->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_35, label_entry_24);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_37 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry_37)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry_37);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_input = new AllocaInst(IntegerType::get(mod->getContext(), 32), "input", label_entry_37);
  ptr_input->setAlignment(4);
  AllocaInst* ptr_T14 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "T14", label_entry_37);
  ptr_T14->setAlignment(4);
  AllocaInst* ptr_T15 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "T15", label_entry_37);
  ptr_T15->setAlignment(4);
  StoreInst* void_38 = new StoreInst(const_int32_15, ptr_retval, false, label_entry_37);
  std::vector<Value*> void_39_params;
  void_39_params.push_back(other_40);
  void_39_params.push_back(other_41);
  void_39_params.push_back(other_29);
  CallInst* void_39 = CallInst::Create(func_llvm_dbg_declare, void_39_params, "", label_entry_37);
  void_39->setCallingConv(CallingConv::C);
  void_39->setTailCall(false);
  AttributeSet void_39_PAL;
  void_39->setAttributes(void_39_PAL);
  
  StoreInst* void_42 = new StoreInst(const_int32_15, ptr_input, false, label_entry_37);
  void_42->setAlignment(4);
  std::vector<Value*> int32_call_params;
  int32_call_params.push_back(const_ptr_20);
  int32_call_params.push_back(ptr_input);
  CallInst* int32_call = CallInst::Create(func___isoc99_scanf, int32_call_params, "call", label_entry_37);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttributeSet int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  LoadInst* int32_43 = new LoadInst(ptr_input, "", false, label_entry_37);
  int32_43->setAlignment(4);
  StoreInst* void_44 = new StoreInst(int32_43, gvar_int32_global, false, label_entry_37);
  void_44->setAlignment(4);
  std::vector<Value*> void_45_params;
  void_45_params.push_back(other_46);
  void_45_params.push_back(other_47);
  void_45_params.push_back(other_29);
  CallInst* void_45 = CallInst::Create(func_llvm_dbg_declare, void_45_params, "", label_entry_37);
  void_45->setCallingConv(CallingConv::C);
  void_45->setTailCall(false);
  AttributeSet void_45_PAL;
  void_45->setAttributes(void_45_PAL);
  
  CallInst* int32_call1 = CallInst::Create(func_foo, "call1", label_entry_37);
  int32_call1->setCallingConv(CallingConv::C);
  int32_call1->setTailCall(false);
  AttributeSet int32_call1_PAL;
  int32_call1->setAttributes(int32_call1_PAL);
  
  StoreInst* void_48 = new StoreInst(int32_call1, ptr_T14, false, label_entry_37);
  void_48->setAlignment(4);
  std::vector<Value*> void_49_params;
  void_49_params.push_back(other_50);
  void_49_params.push_back(other_51);
  void_49_params.push_back(other_29);
  CallInst* void_49 = CallInst::Create(func_llvm_dbg_declare, void_49_params, "", label_entry_37);
  void_49->setCallingConv(CallingConv::C);
  void_49->setTailCall(false);
  AttributeSet void_49_PAL;
  void_49->setAttributes(void_49_PAL);
  
  LoadInst* int32_52 = new LoadInst(ptr_input, "", false, label_entry_37);
  int32_52->setAlignment(4);
  CallInst* int32_call2 = CallInst::Create(func_foo2, int32_52, "call2", label_entry_37);
  int32_call2->setCallingConv(CallingConv::C);
  int32_call2->setTailCall(false);
  AttributeSet int32_call2_PAL;
  int32_call2->setAttributes(int32_call2_PAL);
  
  StoreInst* void_53 = new StoreInst(int32_call2, ptr_T15, false, label_entry_37);
  void_53->setAlignment(4);
  LoadInst* int32_54 = new LoadInst(ptr_T15, "", false, label_entry_37);
  int32_54->setAlignment(4);
  std::vector<Value*> int32_call3_params;
  int32_call3_params.push_back(const_ptr_21);
  int32_call3_params.push_back(int32_54);
  CallInst* int32_call3 = CallInst::Create(func_printf, int32_call3_params, "call3", label_entry_37);
  int32_call3->setCallingConv(CallingConv::C);
  int32_call3->setTailCall(false);
  AttributeSet int32_call3_PAL;
  int32_call3->setAttributes(int32_call3_PAL);
  
  LoadInst* int32_55 = new LoadInst(ptr_input, "", false, label_entry_37);
  int32_55->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_55, label_entry_37);
  
 }
 
 return mod;
}
